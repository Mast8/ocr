{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["registerPlugin","FilePondPluginImagePreview","App","props","state","isProcessing","ocrText","pctg","pond","React","createRef","worker","updateProgressAndLog","bind","file","this","setState","load","loadLanguage","initialize","recognize","text","data","m","console","log","status","progress","toFixed","createWorker","logger","className","style","marginTop","ref","onaddfile","err","doOCR","onremovefile","fiile","margin","textAlign","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qVASAA,yBAAeC,K,IAkHIC,E,kDA7Gf,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAQ,CACTC,cAAe,EACfC,QAAU,GACVC,KAAO,QAEX,EAAKC,KAAOC,IAAMC,YAClB,EAAKC,OAASF,IAAMC,YACpB,EAAKE,qBAAuB,EAAKA,qBAAqBC,KAA1B,gBATd,E,2FAYNC,G,gFACRC,KAAKC,SAAS,CACVX,cAAe,EACfC,QAAU,GACVC,KAAO,S,SAGLQ,KAAKJ,OAAOM,O,uBAEZF,KAAKJ,OAAOO,aAAa,O,uBACzBH,KAAKJ,OAAOQ,WAAW,O,uBAGIJ,KAAKJ,OAAOS,UAAUN,EAAKA,M,gBAA5CO,E,EAARC,KAAQD,KAChBN,KAAKC,SAAS,CACVX,cAAe,EACfC,QAAUe,I,mJAGGE,GAKjBC,QAAQC,IAAIF,GAIZ,GAAgB,qBAAbA,EAAEG,OAA8B,CAC/B,IAAInB,EAAQgB,EAAEI,SAJG,EAI0B,IAC3CZ,KAAKC,SAAS,CACVT,KAAOA,EAAKqB,QALA,Q,0CAWJ,IAAD,OAGfb,KAAKJ,OAASkB,uBAAa,CACvBC,OAAQ,SAAAP,GAAC,OAAI,EAAKX,qBAAqBW,Q,+BAKrC,IAAD,OACL,OACI,yBAAKQ,UAAU,OACX,yBAAKA,UAAU,aACX,yBAAKC,MAAO,CAACC,UAAY,OAAQF,UAAU,OACvC,yBAAKA,UAAU,aAGf,yBAAKA,UAAU,YACX,kBAAC,WAAD,CAAUG,IAAK,SAAAA,GAAG,OAAI,EAAK1B,KAAO0B,GAC9BC,UAAW,SAACC,EAAItB,GACZ,EAAKuB,MAAMvB,IAEfwB,aAAc,SAACF,EAAIG,GACf,EAAKvB,SAAS,CACVV,QAAU,SAK1B,yBAAKyB,UAAU,cAKnB,yBAAKA,UAAU,QACX,wBAAIA,UAAU,eACV,yBAAKC,MAAO,CAACQ,OAAS,KAAMC,UAAW,QAASV,UAAU,OACtD,yBAAKA,UAAU,aACX,uBAAGA,UAAW,qBAAuBhB,KAAKX,MAAMC,aAAe,UAAY,MAD/E,IACyF,0BAAM0B,UAAU,eAAehB,KAAKX,MAAMC,aAAX,6BAAgDU,KAAKX,MAAMG,KAA3D,QAAwE,cAAvG,QAKjG,yBAAKwB,UAAU,aACX,uBAAGA,UAAU,aAAehB,KAAKX,MAAMC,aAC/B,cACgC,IAA9BU,KAAKX,MAAME,QAAQoC,OAAe,8DAAgE3B,KAAKX,MAAME,WAK3H,yBAAKyB,UAAU,mB,GAtGrBtB,IAAMkC,WCAJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4ae130ba.chunk.js","sourcesContent":["import React from 'react';\nimport { createWorker } from 'tesseract.js';\nimport { FilePond, registerPlugin } from 'react-filepond';\nimport FilePondPluginImagePreview from 'filepond-plugin-image-preview';\nimport 'filepond-plugin-image-preview/dist/filepond-plugin-image-preview.min.css';\nimport 'filepond/dist/filepond.min.css';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nregisterPlugin(FilePondPluginImagePreview);\n\n\nclass App extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.state = {\n            isProcessing : false,\n            ocrText : '',\n            pctg : '0.00'\n        }\n        this.pond = React.createRef();\n        this.worker = React.createRef();\n        this.updateProgressAndLog = this.updateProgressAndLog.bind(this);\n    }\n\n    async doOCR(file) {\n        this.setState({\n            isProcessing : true,\n            ocrText : '',\n            pctg : '0.00'\n        })\n        // Loading tesseract.js functions\n        await this.worker.load();\n        // Loadingg language as 'English'\n        await this.worker.loadLanguage('eng');\n        await this.worker.initialize('eng');\n        // Sending the File Object into the Recognize function to\n        // parse the data\n        const { data: { text } } = await this.worker.recognize(file.file);\n        this.setState({\n            isProcessing : false,\n            ocrText : text\n        })\n    };\n    updateProgressAndLog(m){\n\n        // Maximum value out of which percentage needs to be\n        // calculated. 0 for 0 % and 1 for Max 100%\n        // DECIMAL_COUNT specifies no of floating decimal points in Percentage\n        console.log(m);\n        var MAX_PARCENTAGE = 1 ;\n        var DECIMAL_COUNT = 2 ;\n\n        if(m.status === \"recognizing text\"){\n            var pctg = (m.progress / MAX_PARCENTAGE) * 100\n            this.setState({\n                pctg : pctg.toFixed(DECIMAL_COUNT)\n            })\n\n        }\n    }\n       \n    componentDidMount(){\n        // Logs the output object to Update Progress, which\n        // checks for Tesseract JS status & Updates the progress\n        this.worker = createWorker({\n            logger: m => this.updateProgressAndLog(m),\n        });\n\n    }\n    \n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"container\">\n                    <div style={{marginTop : \"10%\"}} className=\"row\">\n                        <div className=\"col-md-4\">\n\n                        </div>\n                        <div className=\"col-md-4\">\n                            <FilePond ref={ref => this.pond = ref}\n                                onaddfile={(err,file) =>{\n                                    this.doOCR(file);\n                                }}\n                                onremovefile={(err,fiile) =>{\n                                    this.setState({\n                                        ocrText : ''\n                                    })\n                                }}\n                                />\n                        </div>\n                        <div className=\"col-md-4\">\n\n                        </div>\n                    </div>\n\n                    <div className=\"card\">\n                        <h5 className=\"card-header\">\n                            <div style={{margin : \"1%\", textAlign: \"left\"}} className=\"row\">\n                                <div className=\"col-md-12\">\n                                    <i className={\"fas fa-cog fa-2x \" + (this.state.isProcessing ? \"fa-spin\" : \"\")}></i> <span className=\"status-text\">{this.state.isProcessing ? `Processing Image ( ${this.state.pctg} % )` : \"Parsed Text\"} </span>\n                                </div>\n                            </div>\n                        </h5>\n\n                        <div className=\"card-body\">\n                            <p className=\"card-text\" >{(this.state.isProcessing) ?\n                                    '...........'\n                                    : this.state.ocrText.length === 0 ? \"No Valid Text Found / Upload Image to Parse Text From Image\" : this.state.ocrText }</p>\n                            </div>\n                        </div>\n\n\n                        <div className=\"ocr-text\">\n\n                        </div>\n                    </div>\n\n                </div>\n            );}\n        }\n\n    export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}